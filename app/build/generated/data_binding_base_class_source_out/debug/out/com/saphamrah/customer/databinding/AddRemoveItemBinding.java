// Generated by view binder compiler. Do not edit!
package com.saphamrah.customer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.saphamrah.customer.R;
import com.saphamrah.customer.utils.customViews.EditTextWatcher;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AddRemoveItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditTextWatcher ETProductCount;

  @NonNull
  public final ImageView imgAdd;

  @NonNull
  public final ImageView imgRemove;

  @NonNull
  public final LinearLayout linPurchase;

  @NonNull
  public final LinearLayout linPurchaseCount;

  private AddRemoveItemBinding(@NonNull LinearLayout rootView,
      @NonNull EditTextWatcher ETProductCount, @NonNull ImageView imgAdd,
      @NonNull ImageView imgRemove, @NonNull LinearLayout linPurchase,
      @NonNull LinearLayout linPurchaseCount) {
    this.rootView = rootView;
    this.ETProductCount = ETProductCount;
    this.imgAdd = imgAdd;
    this.imgRemove = imgRemove;
    this.linPurchase = linPurchase;
    this.linPurchaseCount = linPurchaseCount;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AddRemoveItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AddRemoveItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.add_remove_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AddRemoveItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ET_product_count;
      EditTextWatcher ETProductCount = ViewBindings.findChildViewById(rootView, id);
      if (ETProductCount == null) {
        break missingId;
      }

      id = R.id.img_add;
      ImageView imgAdd = ViewBindings.findChildViewById(rootView, id);
      if (imgAdd == null) {
        break missingId;
      }

      id = R.id.img_remove;
      ImageView imgRemove = ViewBindings.findChildViewById(rootView, id);
      if (imgRemove == null) {
        break missingId;
      }

      id = R.id.lin_purchase;
      LinearLayout linPurchase = ViewBindings.findChildViewById(rootView, id);
      if (linPurchase == null) {
        break missingId;
      }

      id = R.id.lin_purchaseCount;
      LinearLayout linPurchaseCount = ViewBindings.findChildViewById(rootView, id);
      if (linPurchaseCount == null) {
        break missingId;
      }

      return new AddRemoveItemBinding((LinearLayout) rootView, ETProductCount, imgAdd, imgRemove,
          linPurchase, linPurchaseCount);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
