// Generated by view binder compiler. Do not edit!
package com.saphamrah.customer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.saphamrah.customer.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PaymentBottomSheetBinding implements ViewBinding {
  @NonNull
  private final View rootView;

  @NonNull
  public final ImageView arrowDownBottomSheet;

  @NonNull
  public final View linBottomSheet;

  @NonNull
  public final LinearLayout linDetailsView;

  @NonNull
  public final LinearLayout linPurchase;

  @NonNull
  public final ImageView lottieLoadingPayment;

  @NonNull
  public final TextView tvPayment;

  @NonNull
  public final TextView txtBachNumber;

  @NonNull
  public final TextView txtExpirationDate;

  @NonNull
  public final TextView txtInventory;

  @NonNull
  public final TextView txtPaymentSum;

  @NonNull
  public final TextView txtProductionDate;

  @NonNull
  public final TextView txtSellPrice;

  private PaymentBottomSheetBinding(@NonNull View rootView, @NonNull ImageView arrowDownBottomSheet,
      @NonNull View linBottomSheet, @NonNull LinearLayout linDetailsView,
      @NonNull LinearLayout linPurchase, @NonNull ImageView lottieLoadingPayment,
      @NonNull TextView tvPayment, @NonNull TextView txtBachNumber,
      @NonNull TextView txtExpirationDate, @NonNull TextView txtInventory,
      @NonNull TextView txtPaymentSum, @NonNull TextView txtProductionDate,
      @NonNull TextView txtSellPrice) {
    this.rootView = rootView;
    this.arrowDownBottomSheet = arrowDownBottomSheet;
    this.linBottomSheet = linBottomSheet;
    this.linDetailsView = linDetailsView;
    this.linPurchase = linPurchase;
    this.lottieLoadingPayment = lottieLoadingPayment;
    this.tvPayment = tvPayment;
    this.txtBachNumber = txtBachNumber;
    this.txtExpirationDate = txtExpirationDate;
    this.txtInventory = txtInventory;
    this.txtPaymentSum = txtPaymentSum;
    this.txtProductionDate = txtProductionDate;
    this.txtSellPrice = txtSellPrice;
  }

  @Override
  @NonNull
  public View getRoot() {
    return rootView;
  }

  @NonNull
  public static PaymentBottomSheetBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PaymentBottomSheetBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.payment_bottom_sheet, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PaymentBottomSheetBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.arrow_down_bottom_sheet;
      ImageView arrowDownBottomSheet = ViewBindings.findChildViewById(rootView, id);
      if (arrowDownBottomSheet == null) {
        break missingId;
      }

      View linBottomSheet = rootView;

      id = R.id.lin_details_view;
      LinearLayout linDetailsView = ViewBindings.findChildViewById(rootView, id);
      if (linDetailsView == null) {
        break missingId;
      }

      id = R.id.lin_purchase;
      LinearLayout linPurchase = ViewBindings.findChildViewById(rootView, id);
      if (linPurchase == null) {
        break missingId;
      }

      id = R.id.lottie_loading_payment;
      ImageView lottieLoadingPayment = ViewBindings.findChildViewById(rootView, id);
      if (lottieLoadingPayment == null) {
        break missingId;
      }

      id = R.id.tv_payment;
      TextView tvPayment = ViewBindings.findChildViewById(rootView, id);
      if (tvPayment == null) {
        break missingId;
      }

      id = R.id.txt_bach_number;
      TextView txtBachNumber = ViewBindings.findChildViewById(rootView, id);
      if (txtBachNumber == null) {
        break missingId;
      }

      id = R.id.txt_expiration_date;
      TextView txtExpirationDate = ViewBindings.findChildViewById(rootView, id);
      if (txtExpirationDate == null) {
        break missingId;
      }

      id = R.id.txt_inventory;
      TextView txtInventory = ViewBindings.findChildViewById(rootView, id);
      if (txtInventory == null) {
        break missingId;
      }

      id = R.id.txt_payment_sum;
      TextView txtPaymentSum = ViewBindings.findChildViewById(rootView, id);
      if (txtPaymentSum == null) {
        break missingId;
      }

      id = R.id.txt_production_date;
      TextView txtProductionDate = ViewBindings.findChildViewById(rootView, id);
      if (txtProductionDate == null) {
        break missingId;
      }

      id = R.id.txt_sell_price;
      TextView txtSellPrice = ViewBindings.findChildViewById(rootView, id);
      if (txtSellPrice == null) {
        break missingId;
      }

      return new PaymentBottomSheetBinding(rootView, arrowDownBottomSheet, linBottomSheet,
          linDetailsView, linPurchase, lottieLoadingPayment, tvPayment, txtBachNumber,
          txtExpirationDate, txtInventory, txtPaymentSum, txtProductionDate, txtSellPrice);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
